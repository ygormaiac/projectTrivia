{"version":3,"sources":["pages/trivia.png","components/Button.js","redux/actions/index.js","pages/Login.js","components/Header.js","components/Card.js","pages/Play.js","pages/Feedback.js","pages/Settings.js","serviceWorker.js","redux/reducers/user.js","redux/reducers/player.js","redux/reducers/index.js","redux/store/index.js","index.js","App.js"],"names":["module","exports","Button","this","props","name","test","disabled","onClick","className","type","data-testid","React","Component","successGame","payload","Login","state","email","handleChange","bind","validadeLogin","loginIn","handleClick","target","value","setState","length","path","dispatchLogin","fetch","json","data","localStorage","setItem","JSON","stringify","token","history","push","player","assertions","score","gravatarEmail","src","img","alt","htmlFor","placeholder","id","onChange","connect","dispatch","saveLoginInfo","Header","total","emailUser","getScore","prevProps","index","parse","getItem","emailPlayer","md5","toString","namePlayer","userReducer","Card","shuffleList","shuffleAnswers","setShuffleState","question","document","querySelectorAll","forEach","btn","correctAnswer","testId","answer","correct_answer","incorrectAnswer","incorrect_answers","map","i","allAnswers","j","Math","floor","random","correct","difficulty","querySelector","classList","remove","innerText","add","category","html","txt","createElement","innerHTML","decodeHtml","key","Play","indexQuestion","countdown","timeOut","scoreSum","sum","addIndex","resultAPI","prevState","clearInterval","cronometerInterval","setInterval","results","multiplier","loading","playerReducer","a","async","loadingGame","error","Feedback","message","rightAnswers","handleMessage","Settings","Boolean","window","location","hostname","match","INITIAL_STATE","action","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Cypress","ReactDOM","render","component","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.98155fd3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Button extends React.Component {\n  render() {\n    const { name, test, disabled, onClick, className } = this.props;\n    return (\n      <button\n        type=\"button\"\n        data-testid={ test }\n        disabled={ disabled }\n        onClick={ onClick }\n        className={ className }\n      >\n        { name }\n      </button>\n    );\n  }\n}\n\nButton.propTypes = {\n  name: PropTypes.string.isRequired,\n  test: PropTypes.string.isRequired,\n  disabled: PropTypes.bool.isRequired,\n  onClick: PropTypes.func.isRequired,\n  className: PropTypes.string.isRequired,\n};\n\nexport default Button;\n","export const SET_PERSONAL_INFO = 'SET_PERSONAL_INFO';\nexport const LOADING_GAME = 'LOADING_API';\nexport const SUCCESS_INITIAL_GAME = 'SUCCESS_INITIAL_GAME';\nexport const ERROR_INITIAL_GAME = 'ERROR_INITIAL_GAME';\n\nexport const saveLoginInfo = (payload) => ({\n  type: SET_PERSONAL_INFO,\n  payload,\n});\n\nexport const loadingGame = (payload) => ({\n  type: LOADING_GAME,\n  payload,\n});\n\nexport const successGame = (payload) => ({\n  type: SUCCESS_INITIAL_GAME,\n  payload,\n});\n\nexport const errorGame = (error) => ({\n  type: ERROR_INITIAL_GAME,\n  error,\n});\n\nexport const decodeHtml = (html) => {\n  const txt = document.createElement('textarea');\n  txt.innerHTML = html;\n  return txt.value;\n} \n\n// export const fetchGameAPI = (dispatch) => {\n//   dispatch(loadingGame());\n//   fetch(`https://opentdb.com/api.php?amount=5&token=${token}`)\n//     .then((response) => response.json()\n//       .then((data) => {\n//         dispatch(successGame(data)),\n//         dispatch(errorGame())\n//       }\n//     ));\n// }\n\nexport function fetchGameAPI() {\n  return async (dispatch) => {\n    const token = JSON.parse(localStorage.getItem('token'));\n    dispatch(loadingGame());\n    try {\n      const data = await (await fetch(`https://opentdb.com/api.php?amount=5&token=${token}`)).json();\n      return dispatch(successGame(data.results));\n    } catch (error) {\n      return dispatch(errorGame(error));\n    }\n  };\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Button from '../components/Button';\nimport { saveLoginInfo } from '../redux/actions';\nimport img from './trivia.png';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      email: '',\n      disabled: true,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.validadeLogin = this.validadeLogin.bind(this);\n    this.loginIn = this.loginIn.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    }, () => this.validadeLogin());\n  }\n\n  validadeLogin() {\n    const regex = /^[a-z0-9.]+@[a-z0-9]+\\.[a-z]+(\\.[a-z]+)?$/i;\n    const { email, name } = this.state;\n    const disabled = !(regex.test(email) && name.length >= 1);\n    this.setState({\n      disabled,\n    });\n  }\n\n  async loginIn(path) {\n    const { dispatchLogin } = this.props;\n    const data = await (await fetch('https://opentdb.com/api_token.php?command=request'))\n      .json();\n    dispatchLogin(this.state);\n    localStorage.setItem('token', JSON.stringify(data.token));\n    this.handleClick(path);\n  }\n\n  handleClick(path) {\n    const { history } = this.props;\n    const { email, name } = this.state;\n    history.push(path);\n    const state = {\n      player: {\n        name,\n        assertions: 0,\n        score: 0,\n        gravatarEmail: email,\n      },\n    };\n    localStorage.setItem('state', JSON.stringify(state));\n  }\n\n  render() {\n    const { disabled } = this.state;\n    return (\n      <div className=\"input-login\">\n        <img src={ img } alt=\"Trivia\" className=\"img-trivia\" />\n        <label htmlFor=\"name\">\n          <input\n            className=\"input-form-data\"\n            placeholder=\"Nome\"\n            id=\"name\"\n            name=\"name\"\n            data-testid=\"input-player-name\"\n            onChange={ this.handleChange }\n          />\n        </label>\n        <label htmlFor=\"email\">\n          <input\n            className=\"input-form-data\"\n            placeholder=\"E-mail\"\n            id=\"email\"\n            name=\"email\"\n            data-testid=\"input-gravatar-email\"\n            onChange={ this.handleChange }\n          />\n        </label>\n        <Button\n          className=\"button-play\"\n          test=\"btn-play\"\n          name=\"Jogar\"\n          disabled={ disabled }\n          onClick={ () => this.loginIn('/play') }\n        />\n        <Button\n          className=\"button-settings\"\n          test=\"btn-settings\"\n          name=\"Configurações\"\n          onClick={ () => this.handleClick('/settings') }\n        />\n      </div>\n    );\n  }\n}\n\nLogin.propTypes = {\n  dispatchLogin: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchLogin: (payload) => dispatch(saveLoginInfo(payload)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport md5 from 'crypto-js/md5';\nimport PropTypes from 'prop-types';\n\nclass Header extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      total: 0,\n    };\n    this.emailUser = this.emailUser.bind(this);\n  }\n\n  componentDidMount() {\n    if (localStorage.state) {\n      this.getScore();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { index } = this.props;\n    if (prevProps.index !== index) {\n      this.getScore();\n    }\n  }\n\n  getScore() {\n    const getScore = JSON.parse(localStorage.getItem('state'));\n    const { player: { score } } = getScore;\n    this.setState({ total: score });\n  }\n\n  emailUser() {\n    const { emailPlayer } = this.props;\n    return md5(emailPlayer).toString();\n  }\n\n  render() {\n    const { namePlayer } = this.props;\n    const { total } = this.state;\n    return (\n      <header data-testid=\"header-player-name\" className=\"header-play\">\n        <img\n          className=\"gravatar-img\"\n          data-testid=\"header-profile-picture\"\n          alt=\"imageUser\"\n          src={ `https://www.gravatar.com/avatar/${this.emailUser()}` }\n        />\n        <span className=\"name-player\">{namePlayer}</span>\n        <span data-testid=\"header-score\" className=\"total-score\">{total}</span>\n      </header>\n    );\n  }\n}\n\nHeader.propTypes = {\n  emailPlayer: PropTypes.string.isRequired,\n  namePlayer: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  namePlayer: state.userReducer.name,\n  emailPlayer: state.userReducer.email,\n});\n\nexport default connect(mapStateToProps)(Header);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './Button';\nimport { decodeHtml } from '../redux/actions';\n\nclass Card extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      shuffleList: [],\n    };\n\n    this.shuffleAnswers = this.shuffleAnswers.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.setShuffleState = this.setShuffleState.bind(this);\n  }\n\n  componentDidMount() {\n    this.setShuffleState();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { question } = this.props;\n\n    if (question !== prevProps.question) {\n      document.querySelectorAll('.btn-answer').forEach((btn) => {\n        btn.disabled = false;\n        btn.className = 'btn-answer';\n      });\n      this.setShuffleState();\n    }\n  }\n\n  setShuffleState() {\n    this.setState({\n      shuffleList: this.shuffleAnswers(),\n    });\n  }\n\n  shuffleAnswers() {\n    const { question } = this.props;\n    if (question) {\n      const { correct_answer: correct,\n        incorrect_answers: incorrect } = question;\n\n      const correctAnswer = {\n        testId: 'correct-answer',\n        answer: correct,\n      };\n      const incorrectAnswer = incorrect\n        .map((answer, i) => ({\n          testId: `wrong-answer-${i}`,\n          answer,\n        }));\n      const allAnswers = [...incorrectAnswer, correctAnswer];\n      for (let i = allAnswers.length - 1; i > 0; i -= 1) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [allAnswers[i], allAnswers[j]] = [allAnswers[j], allAnswers[i]];\n      }\n      // this.setState({ shuffleList: allAnswers });\n      return allAnswers;\n    }\n  }\n\n  handleClick({ target }) {\n    const { question, score } = this.props;\n    const { correct_answer: correct } = question;\n\n    score(target, question.difficulty);\n\n    document.querySelector('.btn-next').classList.remove('hidden');\n    document.querySelectorAll('.btn-answer').forEach((btn) => {\n      if (btn.innerText === correct) {\n        btn.classList.add('green');\n        btn.disabled = true;\n      } else {\n        btn.classList.add('red');\n        btn.disabled = true;\n      }\n    });\n  }\n\n  render() {\n    const { shuffleList } = this.state;\n    const { question } = this.props;\n\n    if (question) {\n      return (\n        <div className=\"question-total\">\n          <span\n            data-testid=\"question-category\"\n            className=\"category\"\n          >\n            {question.category}\n          </span>\n          <p data-testid=\"question-text\" className=\"question\">{ decodeHtml(question.question) }</p>\n          {shuffleList.map((answer, i) => (\n            <Button\n              test={ answer.testId }\n              key={ i }\n              name={ answer.answer }\n              onClick={ this.handleClick }\n              className=\"btn-answer\"\n            />\n          ))}\n        </div>\n      );\n    }\n\n    return <div />;\n  }\n}\n\nCard.propTypes = {\n  question: PropTypes.objectOf(PropTypes.any).isRequired,\n  score: PropTypes.func.isRequired,\n};\n\nexport default Card;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport Card from '../components/Card';\nimport Button from '../components/Button';\nimport { fetchGameAPI } from '../redux/actions';\nimport './Play.css';\n\nclass Play extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      indexQuestion: 0,\n      countdown: 30,\n    };\n\n    this.countdown = this.countdown.bind(this);\n    this.timeOut = this.timeOut.bind(this);\n    this.scoreSum = this.scoreSum.bind(this);\n    this.sum = this.sum.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.addIndex = this.addIndex.bind(this);\n  }\n\n  componentDidMount() {\n    const { resultAPI } = this.props;\n    resultAPI();\n    this.countdown();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.countdown === 0) {\n      this.timeOut();\n      document.querySelector('.btn-next').classList.remove('hidden');\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.cronometerInterval);\n  }\n\n  timeOut() {\n    document.querySelectorAll('.btn-answer')\n      .forEach((btn) => { btn.disabled = true; });\n    this.setState({ countdown: 'Your time is over! :(' });\n    clearInterval(this.cronometerInterval);\n  }\n\n  countdown() {\n    const ONE_SECOND = 1000;\n    this.setState({ countdown: 30 });\n\n    this.cronometerInterval = setInterval(() => {\n      this.setState((prevState) => ({ countdown: prevState.countdown - 1 }));\n    }, ONE_SECOND);\n  }\n\n  scoreSum(target, difficulty) {\n    const { indexQuestion } = this.state;\n    const { results } = this.props;\n    const correct = results[indexQuestion].correct_answer;\n    const state = JSON.parse(localStorage.getItem('state'));\n    clearInterval(this.cronometerInterval);\n\n    if (target.innerText === correct) {\n      const score = this.sum(difficulty);\n      state.player.score += score;\n      state.player.assertions += 1;\n    }\n\n    localStorage.setItem('state', JSON.stringify(state));\n  }\n\n  sum(difficulty) {\n    const { countdown } = this.state;\n    let multiplier = 0;\n    const magicThree = 3;\n\n    if (difficulty === 'hard') multiplier = magicThree;\n    if (difficulty === 'mediun') multiplier = 2;\n    if (difficulty === 'easy') multiplier = 1;\n\n    const magicTen = 10;\n    return magicTen + (countdown * multiplier);\n  }\n\n  handleClick() {\n    const { indexQuestion } = this.state;\n    const { history } = this.props;\n    const magicFour = 4;\n    document.querySelector('.btn-next').classList.add('hidden');\n\n    if (indexQuestion === magicFour) {\n      history.push('/feedback');\n    }\n    clearInterval(this.cronometerInterval);\n    this.countdown();\n    this.addIndex();\n  }\n\n  addIndex() {\n    this.setState((prevState) => ({\n      indexQuestion: prevState.indexQuestion + 1 }));\n  }\n\n  render() {\n    const { results, loading } = this.props;\n    const { indexQuestion, countdown } = this.state;\n\n    if (loading === true) return <div className=\"loading\"></div>;\n    return (\n      <div className=\"card-game\">\n        <Header index={ indexQuestion } />\n        <Card question={ results[indexQuestion] } score={ this.scoreSum } />\n        <span className=\"countdown\">{countdown}</span>\n        <Button\n          name=\"Próxima\"\n          test=\"btn-next\"\n          onClick={ this.handleClick }\n          className=\"btn-next hidden\"\n        />\n      </div>\n    );\n  }\n}\n\nPlay.propTypes = {\n  resultAPI: PropTypes.func.isRequired,\n  results: PropTypes.arrayOf(PropTypes.object).isRequired,\n  loading: PropTypes.bool.isRequired,\n  history: PropTypes.arrayOf(PropTypes.any).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  results: state.playerReducer.results,\n  loading: state.playerReducer.loading,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  resultAPI: () => dispatch(fetchGameAPI()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Play);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport Button from '../components/Button';\n\nclass Feedback extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      message: '',\n      rightAnswers: 0,\n      total: 0,\n    };\n    this.handleMessage = this.handleMessage.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidMount() {\n    this.handleMessage();\n  }\n\n  handleMessage() {\n    const getScore = JSON.parse(localStorage.getItem('state'));\n    const { player: { assertions, score } } = getScore;\n\n    const NUM_ANSWER = 3;\n    if (assertions < NUM_ANSWER) {\n      this.setState({ message: 'Podia ser melhor...' });\n    } else {\n      this.setState({ message: 'Mandou bem!' });\n    }\n\n    this.setState({\n      rightAnswers: assertions,\n      total: score,\n    });\n  }\n\n  handleClick(path) {\n    const { history } = this.props;\n    history.push(path);\n  }\n\n  render() {\n    const { message, rightAnswers, total } = this.state;\n\n    return (\n      <div className=\"div-feedback\">\n        <Header />\n        <h1 data-testid=\"feedback-text\" className=\"feedback\">{message}</h1>\n        <p className=\"results\">\n          {'Você acertou '}\n          <span data-testid=\"feedback-total-question\">{rightAnswers}</span>\n          {' pergunta(s)'}\n        </p>\n        <p className=\"results\">\n          Pontuação total:\n          <span data-testid=\"feedback-total-score\">{total}</span>\n        </p>\n        <section className=\"buttons\">\n        <Button\n          test=\"btn-play-again\"\n          className=\"button-feedback\"\n          name=\"Jogar novamente\"\n          onClick={ () => this.handleClick('/') }\n        />\n        <Button\n          test=\"btn-ranking\"\n          className=\"button-feedback\"\n          name=\"Ver Ranking\"\n          onClick={ () => this.handleClick('/ranking') }\n        />\n        </section>\n      </div>\n    );\n  }\n}\n\nFeedback.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n};\n\nexport default Feedback;\n","import React, { Component } from 'react';\n\nclass Settings extends Component {\n  render() {\n    return (\n      <h2 data-testid=\"settings-title\">Configurações</h2>\n    );\n  }\n}\n\nexport default Settings;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { SET_PERSONAL_INFO } from '../actions';\n\nconst INITIAL_STATE = {\n  email: '',\n  name: '',\n};\n\nconst userReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case SET_PERSONAL_INFO:\n    return {\n      ...state,\n      email: action.payload.email,\n      name: action.payload.name };\n  default:\n    return state;\n  }\n};\n\nexport default userReducer;\n","import { LOADING_GAME, SUCCESS_INITIAL_GAME, ERROR_INITIAL_GAME } from '../actions';\n\nconst INITIAL_STATE = {\n  loading: false,\n  error: '',\n  results: [],\n};\n\nconst playerReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case LOADING_GAME:\n    return { ...state, loading: true };\n  case SUCCESS_INITIAL_GAME:\n    return { ...state, loading: false, results: action.payload };\n  case ERROR_INITIAL_GAME:\n    return { ...state, loading: false, error: 'Deu ruim!' };\n  default:\n    return state;\n  }\n};\n\nexport default playerReducer;\n","import { combineReducers } from 'redux';\nimport userReducer from './user';\nimport playerReducer from './player';\n\nconst rootReducer = combineReducers({ userReducer, playerReducer });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store';\n\nReactDOM.render(\n\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { Login, Play, Settings, Feedback } from './pages';\nimport './css/main.css';\nimport './App.css';\n\nexport default function App() {\n  return (\n    <div>\n      <Switch>\n        <Route path=\"/play\" component={ Play } />\n        <Route path=\"/settings\" component={ Settings } />\n        <Route path=\"/feedback\" component={ Feedback } />\n        <Route path=\"/\" component={ Login } />\n      </Switch>\n    </div>\n  );\n}\n"],"sourceRoot":""}