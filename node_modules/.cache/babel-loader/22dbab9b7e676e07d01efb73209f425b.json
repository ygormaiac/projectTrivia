{"ast":null,"code":"var _jsxFileName = \"/Users/ygormaia/trybe-projects/sd-013-a-project-trivia-react-redux/src/pages/Play.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport Card from '../components/Card';\nimport Button from '../components/Button';\nimport { fetchGameAPI } from '../redux/actions';\nimport loading from './loading-bar';\nimport './Play.css';\n\nclass Play extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      indexQuestion: 0,\n      countdown: 30\n    };\n    this.countdown = this.countdown.bind(this);\n    this.timeOut = this.timeOut.bind(this);\n    this.scoreSum = this.scoreSum.bind(this);\n    this.sum = this.sum.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.addIndex = this.addIndex.bind(this);\n  }\n\n  componentDidMount() {\n    const resultAPI = this.props.resultAPI;\n    resultAPI();\n    this.countdown();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.countdown === 0) {\n      this.timeOut();\n      document.querySelector('.btn-next').classList.remove('hidden');\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.cronometerInterval);\n  }\n\n  timeOut() {\n    document.querySelectorAll('.btn-answer').forEach(btn => {\n      btn.disabled = true;\n    });\n    this.setState({\n      countdown: 'Your time is over! :('\n    });\n    clearInterval(this.cronometerInterval);\n  }\n\n  countdown() {\n    const ONE_SECOND = 1000;\n    this.setState({\n      countdown: 30\n    });\n    this.cronometerInterval = setInterval(() => {\n      this.setState(prevState => ({\n        countdown: prevState.countdown - 1\n      }));\n    }, ONE_SECOND);\n  }\n\n  scoreSum(target, difficulty) {\n    const indexQuestion = this.state.indexQuestion;\n    const results = this.props.results;\n    const correct = results[indexQuestion].correct_answer;\n    const state = JSON.parse(localStorage.getItem('state'));\n    clearInterval(this.cronometerInterval);\n\n    if (target.innerText === correct) {\n      const score = this.sum(difficulty);\n      state.player.score += score;\n      state.player.assertions += 1;\n    }\n\n    localStorage.setItem('state', JSON.stringify(state));\n  }\n\n  sum(difficulty) {\n    const countdown = this.state.countdown;\n    let multiplier = 0;\n    const magicThree = 3;\n    if (difficulty === 'hard') multiplier = magicThree;\n    if (difficulty === 'mediun') multiplier = 2;\n    if (difficulty === 'easy') multiplier = 1;\n    const magicTen = 10;\n    return magicTen + countdown * multiplier;\n  }\n\n  handleClick() {\n    const indexQuestion = this.state.indexQuestion;\n    const history = this.props.history;\n    const magicFour = 4;\n    document.querySelector('.btn-next').classList.add('hidden');\n\n    if (indexQuestion === magicFour) {\n      history.push('/feedback');\n    }\n\n    clearInterval(this.cronometerInterval);\n    this.countdown();\n    this.addIndex();\n  }\n\n  addIndex() {\n    this.setState(prevState => ({\n      indexQuestion: prevState.indexQuestion + 1\n    }));\n  }\n\n  render() {\n    const _this$props = this.props,\n          results = _this$props.results,\n          loading = _this$props.loading;\n    const _this$state = this.state,\n          indexQuestion = _this$state.indexQuestion,\n          countdown = _this$state.countdown;\n    if (loading === true) return React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Loading...\");\n    return React.createElement(\"div\", {\n      className: \"card-game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(Header, {\n      index: indexQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), React.createElement(Card, {\n      question: results[indexQuestion],\n      score: this.scoreSum,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"countdown\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, countdown), React.createElement(Button, {\n      name: \"Pr\\xF3xima\",\n      test: \"btn-next\",\n      onClick: this.handleClick,\n      className: \"btn-next hidden\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }));\n  }\n\n}\n\nPlay.propTypes = {\n  resultAPI: PropTypes.func.isRequired,\n  results: PropTypes.arrayOf(PropTypes.object).isRequired,\n  loading: PropTypes.bool.isRequired,\n  history: PropTypes.arrayOf(PropTypes.any).isRequired\n};\n\nconst mapStateToProps = state => ({\n  results: state.playerReducer.results,\n  loading: state.playerReducer.loading\n});\n\nconst mapDispatchToProps = dispatch => ({\n  resultAPI: () => dispatch(fetchGameAPI())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Play);","map":{"version":3,"sources":["/Users/ygormaia/trybe-projects/sd-013-a-project-trivia-react-redux/src/pages/Play.js"],"names":["React","Component","connect","PropTypes","Header","Card","Button","fetchGameAPI","loading","Play","constructor","props","state","indexQuestion","countdown","bind","timeOut","scoreSum","sum","handleClick","addIndex","componentDidMount","resultAPI","componentDidUpdate","prevProps","prevState","document","querySelector","classList","remove","componentWillUnmount","clearInterval","cronometerInterval","querySelectorAll","forEach","btn","disabled","setState","ONE_SECOND","setInterval","target","difficulty","results","correct","correct_answer","JSON","parse","localStorage","getItem","innerText","score","player","assertions","setItem","stringify","multiplier","magicThree","magicTen","history","magicFour","add","push","render","propTypes","func","isRequired","arrayOf","object","bool","any","mapStateToProps","playerReducer","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport Card from '../components/Card';\nimport Button from '../components/Button';\nimport { fetchGameAPI } from '../redux/actions';\nimport loading from './loading-bar';\nimport './Play.css';\n\nclass Play extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      indexQuestion: 0,\n      countdown: 30,\n    };\n\n    this.countdown = this.countdown.bind(this);\n    this.timeOut = this.timeOut.bind(this);\n    this.scoreSum = this.scoreSum.bind(this);\n    this.sum = this.sum.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.addIndex = this.addIndex.bind(this);\n  }\n\n  componentDidMount() {\n    const { resultAPI } = this.props;\n    resultAPI();\n    this.countdown();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.countdown === 0) {\n      this.timeOut();\n      document.querySelector('.btn-next').classList.remove('hidden');\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.cronometerInterval);\n  }\n\n  timeOut() {\n    document.querySelectorAll('.btn-answer')\n      .forEach((btn) => { btn.disabled = true; });\n    this.setState({ countdown: 'Your time is over! :(' });\n    clearInterval(this.cronometerInterval);\n  }\n\n  countdown() {\n    const ONE_SECOND = 1000;\n    this.setState({ countdown: 30 });\n\n    this.cronometerInterval = setInterval(() => {\n      this.setState((prevState) => ({ countdown: prevState.countdown - 1 }));\n    }, ONE_SECOND);\n  }\n\n  scoreSum(target, difficulty) {\n    const { indexQuestion } = this.state;\n    const { results } = this.props;\n    const correct = results[indexQuestion].correct_answer;\n    const state = JSON.parse(localStorage.getItem('state'));\n    clearInterval(this.cronometerInterval);\n\n    if (target.innerText === correct) {\n      const score = this.sum(difficulty);\n      state.player.score += score;\n      state.player.assertions += 1;\n    }\n\n    localStorage.setItem('state', JSON.stringify(state));\n  }\n\n  sum(difficulty) {\n    const { countdown } = this.state;\n    let multiplier = 0;\n    const magicThree = 3;\n\n    if (difficulty === 'hard') multiplier = magicThree;\n    if (difficulty === 'mediun') multiplier = 2;\n    if (difficulty === 'easy') multiplier = 1;\n\n    const magicTen = 10;\n    return magicTen + (countdown * multiplier);\n  }\n\n  handleClick() {\n    const { indexQuestion } = this.state;\n    const { history } = this.props;\n    const magicFour = 4;\n    document.querySelector('.btn-next').classList.add('hidden');\n\n    if (indexQuestion === magicFour) {\n      history.push('/feedback');\n    }\n    clearInterval(this.cronometerInterval);\n    this.countdown();\n    this.addIndex();\n  }\n\n  addIndex() {\n    this.setState((prevState) => ({\n      indexQuestion: prevState.indexQuestion + 1 }));\n  }\n\n  render() {\n    const { results, loading } = this.props;\n    const { indexQuestion, countdown } = this.state;\n\n    if (loading === true) return <h2>Loading...</h2>;\n    return (\n      <div className=\"card-game\">\n        <Header index={ indexQuestion } />\n        <Card question={ results[indexQuestion] } score={ this.scoreSum } />\n        <span className=\"countdown\">{countdown}</span>\n        <Button\n          name=\"Próxima\"\n          test=\"btn-next\"\n          onClick={ this.handleClick }\n          className=\"btn-next hidden\"\n        />\n      </div>\n    );\n  }\n}\n\nPlay.propTypes = {\n  resultAPI: PropTypes.func.isRequired,\n  results: PropTypes.arrayOf(PropTypes.object).isRequired,\n  loading: PropTypes.bool.isRequired,\n  history: PropTypes.arrayOf(PropTypes.any).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  results: state.playerReducer.results,\n  loading: state.playerReducer.loading,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  resultAPI: () => dispatch(fetchGameAPI()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Play);\n"]},"metadata":{},"sourceType":"module"}