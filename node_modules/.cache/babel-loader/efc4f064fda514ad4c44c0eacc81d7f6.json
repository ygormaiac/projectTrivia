{"ast":null,"code":"var _jsxFileName = \"/Users/ygormaia/trybe-projects/sd-013-a-project-trivia-react-redux/src/components/Card.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './Button';\n\nclass Card extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      shuffleList: []\n    };\n    this.shuffleAnswers = this.shuffleAnswers.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.setShuffleState = this.setShuffleState.bind(this);\n  }\n\n  componentDidMount() {\n    this.setShuffleState();\n  }\n\n  componentDidUpdate(prevProps) {\n    const question = this.props.question;\n\n    if (question !== prevProps.question) {\n      document.querySelectorAll('.btn-answer').forEach(btn => {\n        btn.disabled = false;\n        btn.className = 'btn-answer';\n      });\n      this.setShuffleState();\n    }\n  }\n\n  setShuffleState() {\n    this.setState({\n      shuffleList: this.shuffleAnswers()\n    });\n  }\n\n  shuffleAnswers() {\n    const question = this.props.question;\n\n    if (question) {\n      const correct = question.correct_answer,\n            incorrect = question.incorrect_answers;\n      const correctAnswer = {\n        testId: 'correct-answer',\n        answer: correct\n      };\n      const incorrectAnswer = incorrect.map((answer, i) => ({\n        testId: `wrong-answer-${i}`,\n        answer\n      }));\n      const allAnswers = [...incorrectAnswer, correctAnswer];\n\n      for (let i = allAnswers.length - 1; i > 0; i -= 1) {\n        const j = Math.floor(Math.random() * (i + 1));\n        var _ref = [allAnswers[j], allAnswers[i]];\n        allAnswers[i] = _ref[0];\n        allAnswers[j] = _ref[1];\n      } // this.setState({ shuffleList: allAnswers });\n\n\n      return allAnswers;\n    }\n  }\n\n  handleClick({\n    target\n  }) {\n    const _this$props = this.props,\n          question = _this$props.question,\n          score = _this$props.score;\n    const correct = question.correct_answer;\n    score(target, question.difficulty);\n    document.querySelector('.btn-next').classList.remove('hidden');\n    document.querySelectorAll('.btn-answer').forEach(btn => {\n      if (btn.innerText === correct) {\n        btn.classList.add('green');\n        btn.disabled = true;\n      } else {\n        btn.classList.add('red');\n        btn.disabled = true;\n      }\n    });\n  }\n\n  render() {\n    const shuffleList = this.state.shuffleList;\n    const question = this.props.question;\n\n    if (question) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        \"data-testid\": \"question-category\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, question.category), React.createElement(\"p\", {\n        \"data-testid\": \"question-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, question.question), shuffleList.map((answer, i) => React.createElement(Button, {\n        test: answer.testId,\n        key: i,\n        name: answer.answer,\n        onClick: this.handleClick,\n        className: \"btn-answer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      })));\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    });\n  }\n\n}\n\nCard.propTypes = {\n  question: PropTypes.objectOf(PropTypes.any).isRequired,\n  score: PropTypes.func.isRequired\n};\nexport default Card;","map":{"version":3,"sources":["/Users/ygormaia/trybe-projects/sd-013-a-project-trivia-react-redux/src/components/Card.js"],"names":["React","Component","PropTypes","Button","Card","constructor","props","state","shuffleList","shuffleAnswers","bind","handleClick","setShuffleState","componentDidMount","componentDidUpdate","prevProps","question","document","querySelectorAll","forEach","btn","disabled","className","setState","correct","correct_answer","incorrect","incorrect_answers","correctAnswer","testId","answer","incorrectAnswer","map","i","allAnswers","length","j","Math","floor","random","target","score","difficulty","querySelector","classList","remove","innerText","add","render","category","propTypes","objectOf","any","isRequired","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './Button';\n\nclass Card extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      shuffleList: [],\n    };\n\n    this.shuffleAnswers = this.shuffleAnswers.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.setShuffleState = this.setShuffleState.bind(this);\n  }\n\n  componentDidMount() {\n    this.setShuffleState();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { question } = this.props;\n\n    if (question !== prevProps.question) {\n      document.querySelectorAll('.btn-answer').forEach((btn) => {\n        btn.disabled = false;\n        btn.className = 'btn-answer';\n      });\n      this.setShuffleState();\n    }\n  }\n\n  setShuffleState() {\n    this.setState({\n      shuffleList: this.shuffleAnswers(),\n    });\n  }\n\n  shuffleAnswers() {\n    const { question } = this.props;\n    if (question) {\n      const { correct_answer: correct,\n        incorrect_answers: incorrect } = question;\n\n      const correctAnswer = {\n        testId: 'correct-answer',\n        answer: correct,\n      };\n      const incorrectAnswer = incorrect\n        .map((answer, i) => ({\n          testId: `wrong-answer-${i}`,\n          answer,\n        }));\n      const allAnswers = [...incorrectAnswer, correctAnswer];\n      for (let i = allAnswers.length - 1; i > 0; i -= 1) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [allAnswers[i], allAnswers[j]] = [allAnswers[j], allAnswers[i]];\n      }\n      // this.setState({ shuffleList: allAnswers });\n      return allAnswers;\n    }\n  }\n\n  handleClick({ target }) {\n    const { question, score } = this.props;\n    const { correct_answer: correct } = question;\n\n    score(target, question.difficulty);\n\n    document.querySelector('.btn-next').classList.remove('hidden');\n    document.querySelectorAll('.btn-answer').forEach((btn) => {\n      if (btn.innerText === correct) {\n        btn.classList.add('green');\n        btn.disabled = true;\n      } else {\n        btn.classList.add('red');\n        btn.disabled = true;\n      }\n    });\n  }\n\n  render() {\n    const { shuffleList } = this.state;\n    const { question } = this.props;\n\n    if (question) {\n      return (\n        <div>\n          <span data-testid=\"question-category\">{question.category}</span>\n          <p data-testid=\"question-text\">{question.question}</p>\n          {shuffleList.map((answer, i) => (\n            <Button\n              test={ answer.testId }\n              key={ i }\n              name={ answer.answer }\n              onClick={ this.handleClick }\n              className=\"btn-answer\"\n            />\n          ))}\n        </div>\n      );\n    }\n\n    return <div />;\n  }\n}\n\nCard.propTypes = {\n  question: PropTypes.objectOf(PropTypes.any).isRequired,\n  score: PropTypes.func.isRequired,\n};\n\nexport default Card;\n"]},"metadata":{},"sourceType":"module"}